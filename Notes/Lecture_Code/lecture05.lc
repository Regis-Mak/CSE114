--Welcome to lecture 5

-- Church Numerals
-- To encode the number N , 
-- we use a function that takes arguments
-- f and x , and applies
-- f to x N times!

let ZERO = \f x -> x
let ONE = \f x -> f x
let TWO = \f x -> f (f x)
let THREE = \f x -> f(f (f x))

-- if you have \f x -> x
-- and you want \f x -> f x
-- what do you do?
let INCR = \n -> (\f x -> f (n f x))

let ADD = \n m -> n INCR m

eval add_two_one :
    ADD TWO ONE
    =d> (\n m -> n INCR m) TWO ONE
    =b> (\m -> TWO INCR m) ONE
    =b> TWO INCR ONE
    =d> (\f x -> f (f x)) INCR ONE
    =b> (\x -> INCR (INCR x)) ONE
    =b> INCR (INCR ONE)
    =d> (\n -> (\f x -> f (n f x))) (INCR ONE)
    =b> \f x -> f((INCR ONE) f x)
    =d> \f x -> f(((\n -> (\f x -> f (n f x))) ONE) f x)
    =b> \f x -> f ((\f x -> f (ONE f x)) f x)
    =b> \f x -> f(f (ONE f x))
    =d> \f x -> f(f ((\f x -> f x) f x))
    =b> \f x -> f(f ((\x -> f x) x))
    =b> \f x -> f( f (f x))
    =d> THREE

eval add_two_one_abridged :
    ADD TWO ONE
    =d> (\n m -> n INCR m) TWO ONE
    =b> (\m -> TWO INCR m) ONE
    =b> TWO INCR ONE
    =d> (\f x -> f (f x)) INCR ONE
    =b> (\x -> INCR (INCR x)) ONE
    =b> INCR (INCR ONE)
    =d> (\n -> (\f x -> f (n f x))) (INCR ONE)
    =b> \f x -> f((INCR ONE) f x)
    =d> \f x -> f(((\n -> (\f x -> f (n f x))) ONE) f x)
    =~> THREE